import { describe, it, expect } from 'vitest';
import { PixelCanvas } from './pixelCanvas.js';
import { getPNGCreator } from './png.js';

describe('PNGCreator', () => {
    it('should create the png from the provided pixel canvas correctly (case 1)', () => {
        const canvas = new PixelCanvas({
            width: 8,
            height: 8,
            backgroundColor: 'limegreen',
        })
            .setPixels({ xValues: [1, 6], yValues: [2, 3], color: 'black' })
            .setPixels({ xValues: [2, 5], yValues: [2, 3, 5, 6, 7] })
            .setPixels({ xValues: [3, 4], yValues: [4, 5, 6] });
        const png = getPNGCreator().createFromCanvas({
            pixelCanvas: canvas,
        });
        expect([...png]).toEqual([
            137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 8, 0, 0, 0, 8, 8,
            2, 0, 0, 0, 75, 109, 41, 220, 0, 0, 0, 36, 73, 68, 65, 84, 120, 156, 99, 48, 58, 107,
            132, 21, 49, 224, 147, 96, 0, 3, 40, 31, 198, 198, 43, 129, 38, 132, 98, 7, 3, 18, 32,
            90, 2, 141, 1, 0, 88, 210, 52, 109, 105, 97, 30, 103, 0, 0, 0, 0, 73, 69, 78, 68, 174,
            66, 96, 130,
        ]);
    });

    it('should create the png from the provided pixel canvas correctly (case 2)', () => {
        const canvas = new PixelCanvas({
            width: 10,
            height: 10,
            backgroundColor: 'red',
        })
            .setPixels({ xValues: [1, 6], yValues: [2, 3], color: 'black' })
            .setPixels({ xValues: [2, 5], yValues: [2, 3, 5, 6, 7] })
            .setPixels({ xValues: [3, 4], yValues: [4, 5, 6] });
        const png = getPNGCreator().createFromCanvas({
            pixelCanvas: canvas,
            colorMode: 0,
        });
        expect([...png]).toEqual([
            137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 10, 0, 0, 0, 10,
            8, 0, 0, 0, 0, 168, 89, 144, 97, 0, 0, 0, 35, 73, 68, 65, 84, 120, 156, 99, 240, 129, 3,
            6, 100, 38, 3, 131, 15, 24, 163, 50, 161, 12, 48, 147, 129, 1, 194, 70, 99, 66, 205, 97,
            192, 106, 46, 0, 7, 249, 23, 193, 177, 75, 28, 123, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66,
            96, 130,
        ]);
    });

    it('should create the png from the a buffer correctly (case 1)', () => {
        const buffer = Buffer.from([
            0, 50, 205, 50, 50, 205, 50, 50, 205, 50, 50, 205, 50, 50, 205, 50, 50, 205, 50, 50,
            205, 50, 50, 205, 50, 0, 50, 205, 50, 50, 205, 50, 50, 205, 50, 50, 205, 50, 50, 205,
            50, 50, 205, 50, 50, 205, 50, 50, 205, 50, 0, 50, 205, 50, 0, 0, 0, 0, 0, 0, 50, 205,
            50, 50, 205, 50, 0, 0, 0, 0, 0, 0, 50, 205, 50, 0, 50, 205, 50, 0, 0, 0, 0, 0, 0, 50,
            205, 50, 50, 205, 50, 0, 0, 0, 0, 0, 0, 50, 205, 50, 0, 50, 205, 50, 50, 205, 50, 50,
            205, 50, 0, 0, 0, 0, 0, 0, 50, 205, 50, 50, 205, 50, 50, 205, 50, 0, 50, 205, 50, 50,
            205, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 205, 50, 50, 205, 50, 0, 50, 205, 50,
            50, 205, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 205, 50, 50, 205, 50, 0, 50, 205,
            50, 50, 205, 50, 0, 0, 0, 50, 205, 50, 50, 205, 50, 0, 0, 0, 50, 205, 50, 50, 205, 50,
        ]);

        const png = getPNGCreator().createFromBuffer({
            pixelBuffer: buffer,
            width: 8,
            height: 8,
            colorType: 2,
        });

        expect([...png]).toEqual([
            137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 8, 0, 0, 0, 8, 8,
            2, 0, 0, 0, 75, 109, 41, 220, 0, 0, 0, 36, 73, 68, 65, 84, 120, 156, 99, 48, 58, 107,
            132, 21, 49, 224, 147, 96, 0, 3, 40, 31, 198, 198, 43, 129, 38, 132, 98, 7, 3, 18, 32,
            90, 2, 141, 1, 0, 88, 210, 52, 109, 105, 97, 30, 103, 0, 0, 0, 0, 73, 69, 78, 68, 174,
            66, 96, 130,
        ]);
    });

    it('should create the png from the a buffer correctly (case 2)', () => {
        const buffer = Buffer.from([
            0, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 0, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 0,
            76, 0, 0, 76, 76, 0, 0, 76, 76, 76, 0, 76, 0, 0, 76, 76, 0, 0, 76, 76, 76, 0, 76, 76,
            76, 0, 0, 76, 76, 76, 76, 76, 0, 76, 76, 0, 0, 0, 0, 76, 76, 76, 76, 0, 76, 76, 0, 0, 0,
            0, 76, 76, 76, 76, 0, 76, 76, 0, 76, 76, 0, 76, 76, 76, 76, 0, 76, 76, 76, 76, 76, 76,
            76, 76, 76, 76, 0, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
        ]);

        const png = getPNGCreator().createFromBuffer({
            pixelBuffer: buffer,
            width: 10,
            height: 10,
            colorType: 0,
        });

        expect([...png]).toEqual([
            137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 10, 0, 0, 0, 10,
            8, 0, 0, 0, 0, 168, 89, 144, 97, 0, 0, 0, 35, 73, 68, 65, 84, 120, 156, 99, 240, 129, 3,
            6, 100, 38, 3, 131, 15, 24, 163, 50, 161, 12, 48, 147, 129, 1, 194, 70, 99, 66, 205, 97,
            192, 106, 46, 0, 7, 249, 23, 193, 177, 75, 28, 123, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66,
            96, 130,
        ]);
    });
});
